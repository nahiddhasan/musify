// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole        @default(USER)
  song          Song[]
  playlists     Playlist[]
  likedPlaylist LikedPlaylist[]
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Song {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  artist    User     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String
  duration  String
  lyrics    String?
  audioPath String
  image     String?

  playlists        Playlist[]      @relation(fields: [playlistIds], references: [id])
  playlistIds      String[]
  LikedPlaylist    LikedPlaylist[] @relation(fields: [likedPlaylistIds], references: [id])
  likedPlaylistIds String[]
}

model Playlist {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  desc      String?
  image     String?
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  songIds   String[]
  songs     Song[]   @relation(fields: [songIds], references: [id])
}

model LikedPlaylist {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  image     String?
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  songIds   String[]
  songs     Song[]   @relation(fields: [songIds], references: [id])
}
